# continuous-experimentation.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-deployment
  labels: { app: model, version: v1}
spec:
  replicas: 1
  selector:
    matchLabels: { app: model, version: v1}
  template:
    metadata:
      labels: { app: model, version: v1}
    spec:
      containers:
        - name: model-service
          image: ghcr.io/remla23-team3/model-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 6789
      imagePullSecrets:
        - name: registry-credentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-v1
  labels: { app: app, version: v1 }
spec:
  replicas: 2
  selector:
    matchLabels: { app: app, version: v1}
  template:
    metadata:
      labels: { app: app, version: v1}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        proxy.istio.io/config: |-
          proxyStatsMatcher:
            inclusionRegexps:
            - ".*http_local_rate_limit.*"
    spec:
      containers:
        - name: app
          image: ghcr.io/remla23-team3/app:v0.0.4
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
      imagePullSecrets:
        - name: registry-credentials
---
apiVersion: v1
kind: Service
metadata:
  name: model-service
spec:
  selector:
    app: model
  ports:
    - name: http
      port: 6789
      targetPort: 6789
---
apiVersion: v1
kind: Service
metadata:
  name: app-service
spec:
  selector:
    app: app
  ports:
    - name: http
      port: 8081
      targetPort: 8081
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: my-virtual-service
spec:
  gateways:
    - my-gateway
  hosts:
  - "*"
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: app-service
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: my-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: filter-local-ratelimit-app-service
  namespace: default
spec:
  workloadSelector:
    labels:
      app: app # ? labels: { app: app-service, version: v1 }
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: http_local_rate_limiter
              token_bucket:
                max_tokens: 10
                tokens_per_fill: 10
                fill_interval: 60s
              filter_enabled:
                runtime_key: local_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              filter_enforced:
                runtime_key: local_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              response_headers_to_add:
                - append: false
                  header:
                    key: x-local-rate-limit
                    value: 'true'